// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   clerkID    String   @unique
//   username   String   @unique
//   email      String   @unique
//   elo        Int      @default(300)
//   createdAt  DateTime @default(now())
//   lastOnline DateTime @default(now())
//   gamesIDs   String[] @default([]) @db.ObjectId
//   games      Game[]   @relation(fields: [gamesIDs], references: [id])
//   settings   Json?
// }

// model Game {
//   id            String        @id @default(auto()) @map("_id") @db.ObjectId
//   gameType      String
//   playersIDs    String[]      @db.ObjectId
//   players       User[]        @relation(fields: [playersIDs], references: [id])
//   gameResult    GameResult
//   gameEndReason GameEndReason
//   eloBefore     Int[] // [0] - player1, [1] - player2, before game
//   eloAfter      Int[] // [0] - player1, [1] - player2, after game
//   playedAt      DateTime      @default(now()) @db.Date
// }

// enum GameResult {
//   Draw
//   Player1Win
//   Player2Win
// }

// enum GameEndReason {
//   Resignation
//   TimeOut
//   Checkmate
//   Stalemate
// }

model User {
  id          String   @id @map("_id") @db.ObjectId // ID pobierane z Clerk’a
  username    String // Username z Clerk’a
  name        String // Imię z Clerk’a
  fullname    String // Pełne imię z Clerk’a
  createdAt   DateTime // Data utworzenia konta (Clerk)
  lastOnline  DateTime // Ostatnia aktywność – aktualizowana ręcznie lub przez logikę aplikacji
  gamesIDs    String[] // Lista identyfikatorów gier
  games       Game[]   @relation("UserGames") // Relacja do gier
  settings    Json // Ustawienia użytkownika zapisane jako JSON
  gamesWon    Int      @default(0) // Liczba wygranych gier
  gamesLost   Int      @default(0) // Liczba przegranych gier
  gameHistory Json? // Historia gier (opcjonalnie)
}

model Game {
  id        String   @id @map("_id") @db.ObjectId
  name      String // Nazwa gry, np. "Szachy"
  createdAt DateTime @default(now())
  // Opcjonalna relacja do użytkownika, jeśli chcesz przypisać grę do konkretnego użytkownika
  user      User?    @relation("UserGames", fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}
