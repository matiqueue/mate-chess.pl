// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId   String   @unique
  gamesPlayed   Int
  winPercentage Int
  eloPoints     Int
  timePlayed    DateTime
  nickname      String?
  joinDate      String?
  avatar        String?
  name          String?
  lastGames     Game[]
}

model Game {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  result        String
  opponent      String
  eloChange     String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String
}

// model User {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   clerkID    String   @unique // ID pobierane z Clerk’a 
//   username   String   // Username z Clerk’a
//   elo        Int      @default(300)
//   createdAt  DateTime // Data utworzenia konta (Clerk)
//   lastOnline DateTime // Ostatnia aktywność – aktualizowana ręcznie lub przez logikę aplikacji
//   settings   Json     // Ustawienia użytkownika zapisane jako JSON
//   gamesWon   Int      @default(0) // Liczba wygranych gier
//   gamesLost  Int      @default(0) // Liczba przegranych gier
// }

// model Game {
//   id             String   @id @map("_id") @db.ObjectId
//   gameType       String
//   createdAt      DateTime @default(now())
//   player1        String   @db.ObjectId
//   player2        String   @db.ObjectId
//   player1_PGN    String
//   player2_PGN    String
//   player1_result String
//   player2_result String
// }
